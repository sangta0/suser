server.port=8081
spring.integration.jdbc.initialize-schema=never
spring.datasource.master.jdbc-url=jdbc:mysql://localhost:3307/door?useUnicode=true&useJDBCCompliantTimezoneShift=true&serverTimezone=UTC&characterEncoding=utf8
spring.datasource.master.username=root
spring.datasource.master.password=
# 可以不配置，根据url自动识别，建议配置
spring.datasource.master.driverClassName=com.mysql.jdbc.Driver
###################以下为druid增加的配置###########################
spring.datasource.master.type=com.alibaba.druid.pool.DruidDataSource
# 初始化连接池个数
spring.datasource.master.initialSize=5
# 最小连接池个数――》已经不再使用，配置了也没效果
spring.datasource.master.minIdle=2
# 最大连接池个数
spring.datasource.master.maxActive=20
# 配置获取连接等待超时的时间，单位毫秒，缺省启用公平锁，并发效率会有所下降
spring.datasource.master.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.master.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.master.minEvictableIdleTimeMillis=300000
# 用来检测连接是否有效的sql，要求是一个查询语句。
# 如果validationQuery为null，testOnBorrow、testOnReturn、testWhileIdle都不会起作用
spring.datasource.master.validationQuery=SELECT 1 FROM DUAL
# 建议配置为true，不影响性能，并且保证安全性。
# 申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
spring.datasource.master.testWhileIdle=true
# 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.master.testOnBorrow=false
# 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能
spring.datasource.master.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.master.poolPreparedStatements=true
spring.datasource.master.maxPoolPreparedStatementPerConnectionSize=20
# 通过别名的方式配置扩展插件，多个英文逗号分隔，常用的插件有：
# 监控统计用的filter:stat
# 日志用的filter:log4j
# 防御sql注入的filter:wall
spring.datasource.master.filters=stat,wall,log4j
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.master.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
# 合并多个DruidDataSource的监控数据
spring.datasource.master.useGlobalDataSourceStat=true
# eureka配置
# 注册到eureka server的服务名
spring.application.name=suser
# eureka server的地址
#eureka.client.serviceUrl.defaultZone= http://localhost:8001/eureka/
spring.cloud.zookeeper.connectString=localhost:2181
#暴漏的服务地址
spring.cloud.zookeeper.discovery.instanceHost=localhost 
#暴漏的服务端口
spring.cloud.zookeeper.discovery.instancePort=${server.port}